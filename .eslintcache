[{"E:\\React\\expense-tracker\\src\\index.js":"1","E:\\React\\expense-tracker\\src\\App.js":"2","E:\\React\\expense-tracker\\src\\ErrorBoundary.js":"3","E:\\React\\expense-tracker\\src\\styles.js":"4","E:\\React\\expense-tracker\\src\\components\\Details\\Details.js":"5","E:\\React\\expense-tracker\\src\\components\\Main\\Main.js":"6","E:\\React\\expense-tracker\\src\\components\\Details\\styles.js":"7","E:\\React\\expense-tracker\\src\\components\\Main\\styles.js":"8","E:\\React\\expense-tracker\\src\\components\\Main\\Form\\Form.js":"9","E:\\React\\expense-tracker\\src\\components\\Main\\Form\\styles.js":"10","E:\\React\\expense-tracker\\src\\components\\Main\\List\\List.js":"11","E:\\React\\expense-tracker\\src\\components\\Main\\List\\styles.js":"12","E:\\React\\expense-tracker\\src\\context\\context.js":"13","E:\\React\\expense-tracker\\src\\context\\contextReducer.js":"14","E:\\React\\expense-tracker\\src\\constants\\categories.js":"15","E:\\React\\expense-tracker\\src\\utils\\formatDate.js":"16","E:\\React\\expense-tracker\\src\\hooks\\useTransactions.js":"17","E:\\React\\expense-tracker\\src\\components\\Main\\Speechly.js":"18","E:\\React\\expense-tracker\\src\\components\\Snackbar\\Snackbar.js":"19","E:\\React\\expense-tracker\\src\\components\\Snackbar\\styles.js":"20","E:\\React\\expense-tracker\\src\\components\\InfoCard.js":"21"},{"size":512,"mtime":1610105996177,"results":"22","hashOfConfig":"23"},{"size":1843,"mtime":1610178458784,"results":"24","hashOfConfig":"23"},{"size":959,"mtime":1609487407836,"results":"25","hashOfConfig":"23"},{"size":646,"mtime":1610178611545,"results":"26","hashOfConfig":"23"},{"size":824,"mtime":1610170844907,"results":"27","hashOfConfig":"23"},{"size":1485,"mtime":1610175819888,"results":"28","hashOfConfig":"23"},{"size":234,"mtime":1609500125334,"results":"29","hashOfConfig":"23"},{"size":514,"mtime":1609558690587,"results":"30","hashOfConfig":"23"},{"size":7071,"mtime":1610174355891,"results":"31","hashOfConfig":"23"},{"size":247,"mtime":1609560652126,"results":"32","hashOfConfig":"23"},{"size":2265,"mtime":1609848797341,"results":"33","hashOfConfig":"23"},{"size":416,"mtime":1609828607640,"results":"34","hashOfConfig":"23"},{"size":1382,"mtime":1610171480364,"results":"35","hashOfConfig":"23"},{"size":700,"mtime":1610170377440,"results":"36","hashOfConfig":"23"},{"size":1849,"mtime":1609908849606,"results":"37","hashOfConfig":"23"},{"size":384,"mtime":1609910689416,"results":"38","hashOfConfig":"23"},{"size":1278,"mtime":1609930221064,"results":"39","hashOfConfig":"23"},{"size":634,"mtime":1610091739132,"results":"40","hashOfConfig":"23"},{"size":1064,"mtime":1610172849322,"results":"41","hashOfConfig":"23"},{"size":228,"mtime":1610172130496,"results":"42","hashOfConfig":"23"},{"size":498,"mtime":1610175781205,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"d39urk",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"E:\\React\\expense-tracker\\src\\index.js",[],["90","91"],"E:\\React\\expense-tracker\\src\\App.js",["92"],"E:\\React\\expense-tracker\\src\\ErrorBoundary.js",[],"E:\\React\\expense-tracker\\src\\styles.js",[],"E:\\React\\expense-tracker\\src\\components\\Details\\Details.js",["93","94"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardHeader, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nimport useStyles from \"./styles\";\r\nimport useTransactions from \"../../hooks/useTransactions\";\r\n\r\nconst Details = ({ title }) => {\r\n    const classes = useStyles();\r\n    const { total, chartData } = useTransactions(title);\r\n\r\n    // const cardClass = classes[title.toLowerCase()];\r\n    console.log(title);\r\n    return (\r\n        <Card className={classes[title.toLowerCase()]}>\r\n            <CardHeader title={title} />\r\n            <CardContent>\r\n                <Typography variant=\"h5\">$ {total}</Typography>\r\n                <Doughnut data={chartData} />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Details;\r\n","E:\\React\\expense-tracker\\src\\components\\Main\\Main.js",[],"E:\\React\\expense-tracker\\src\\components\\Details\\styles.js",[],"E:\\React\\expense-tracker\\src\\components\\Main\\styles.js",[],"E:\\React\\expense-tracker\\src\\components\\Main\\Form\\Form.js",["95"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    TextField,\r\n    Typography,\r\n    Grid,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport useStyles from \"./styles\";\r\n\r\nimport formatDate from \"../../../utils/formatDate\";\r\nimport {\r\n    incomeCategories,\r\n    expenseCategories,\r\n} from \"../../../constants/categories\";\r\nimport { useExpenseTrackerContext } from \"../../../context/context\";\r\n\r\nimport { useSpeechContext } from \"@speechly/react-client\";\r\nimport CustomizedSnackbar from \"../../Snackbar/Snackbar\";\r\n\r\nconst initialState = {\r\n    amount: \"\",\r\n    type: \"Income\",\r\n    category: \"\",\r\n    date: formatDate(new Date()),\r\n};\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [formData, setFormData] = useState(initialState);\r\n    const { addTransaction } = useExpenseTrackerContext();\r\n    const { segment } = useSpeechContext();\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleChange = (event) => {\r\n        const formDataItem = event.target.name;\r\n        if (formDataItem === \"date\") {\r\n            setFormData({\r\n                ...formData,\r\n                [formDataItem]: formatDate(event.target.value),\r\n            });\r\n        } else {\r\n            setFormData({ ...formData, [formDataItem]: event.target.value });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        if (\r\n            Number.isNaN(Number(formData.amount)) ||\r\n            !formData.date.includes(\"-\")\r\n        )\r\n            return;\r\n        const transaction = {\r\n            ...formData,\r\n            amount: Number(formData.amount),\r\n            id: uuidv4(),\r\n        };\r\n\r\n        setOpen(true);\r\n        addTransaction(transaction);\r\n        setFormData(initialState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (segment) {\r\n            // console.log(segment);\r\n            if (segment.intent.intent === \"add_expense\") {\r\n                setFormData({ ...formData, type: \"Expense\" });\r\n            } else if (segment.intent.intent === \"add_income\") {\r\n                setFormData({ ...formData, type: \"Income\" });\r\n            } else if (\r\n                segment.isFinal &&\r\n                segment.intent.intent === \"create_transaction\"\r\n            ) {\r\n                return handleSubmit();\r\n            } else if (\r\n                segment.isFinal &&\r\n                segment.intent.intent === \"cancel_transaction\"\r\n            ) {\r\n                setFormData(initialState);\r\n            }\r\n\r\n            segment.entities.forEach((e) => {\r\n                const category = `${e.value.charAt(0)}${e.value\r\n                    .slice(1)\r\n                    .toLowerCase()}`;\r\n                switch (e.type) {\r\n                    case \"amount\":\r\n                        setFormData({ ...formData, amount: e.value });\r\n                        break;\r\n                    case \"category\":\r\n                        if (\r\n                            incomeCategories\r\n                                .map((iC) => iC.type)\r\n                                .includes(category)\r\n                        ) {\r\n                            setFormData({\r\n                                ...formData,\r\n                                type: \"Income\",\r\n                                category,\r\n                            });\r\n                        } else if (\r\n                            expenseCategories\r\n                                .map((iC) => iC.type)\r\n                                .includes(category)\r\n                        ) {\r\n                            setFormData({\r\n                                ...formData,\r\n                                type: \"Expense\",\r\n                                category,\r\n                            });\r\n                        }\r\n                        break;\r\n                    case \"date\":\r\n                        setFormData({ ...formData, date: e.value });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n            if (\r\n                segment.isFinal &&\r\n                formData.amount &&\r\n                formData.category &&\r\n                formData.type &&\r\n                formData.date\r\n            ) {\r\n                handleSubmit();\r\n            }\r\n        }\r\n    }, [segment]);\r\n\r\n    let selectedCategories =\r\n        formData.type === \"Income\" ? incomeCategories : expenseCategories;\r\n\r\n    selectedCategories = selectedCategories.map((category) => (\r\n        <MenuItem key={category.type} value={category.type}>\r\n            {category.type}\r\n        </MenuItem>\r\n    ));\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <CustomizedSnackbar open={open} setOpen={setOpen} />\r\n            <Grid item xs={12}>\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                    {segment?.words.map((w) => w.value).join(\" \")}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select\r\n                        name=\"type\"\r\n                        value={formData.type}\r\n                        onChange={handleChange}\r\n                    >\r\n                        <MenuItem value=\"Income\">Income</MenuItem>\r\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select\r\n                        name=\"category\"\r\n                        value={formData.category}\r\n                        onChange={handleChange}\r\n                    >\r\n                        {selectedCategories}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n                <TextField\r\n                    value={formData.amount}\r\n                    onChange={handleChange}\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    label=\"Amount\"\r\n                    fullWidth\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n                <TextField\r\n                    value={formData.date || \"\"}\r\n                    onChange={handleChange}\r\n                    name=\"date\"\r\n                    type=\"date\"\r\n                    label=\"Date\"\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                />\r\n            </Grid>\r\n\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                onClick={handleSubmit}\r\n            >\r\n                Create\r\n            </Button>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","E:\\React\\expense-tracker\\src\\components\\Main\\Form\\styles.js",[],"E:\\React\\expense-tracker\\src\\components\\Main\\List\\List.js",[],"E:\\React\\expense-tracker\\src\\components\\Main\\List\\styles.js",[],"E:\\React\\expense-tracker\\src\\context\\context.js",[],"E:\\React\\expense-tracker\\src\\context\\contextReducer.js",["96"],"import React from \"react\";\r\n\r\nconst contextReducer = (state, action) => {\r\n    let transactions;\r\n    switch (action.type) {\r\n        case \"ADD_TRANSACTION\":\r\n            transactions = [action.payload, ...state];\r\n            // console.log(transactions);\r\n\r\n            localStorage.setItem(\"transactions\", JSON.stringify(transactions));\r\n\r\n            return transactions;\r\n\r\n        case \"DELETE_TRANSACTION\":\r\n            transactions = state.filter((t) => t.id !== action.payload);\r\n\r\n            localStorage.setItem(\"transactions\", JSON.stringify(transactions));\r\n\r\n            return transactions;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default contextReducer;\r\n","E:\\React\\expense-tracker\\src\\constants\\categories.js",[],"E:\\React\\expense-tracker\\src\\utils\\formatDate.js",[],"E:\\React\\expense-tracker\\src\\hooks\\useTransactions.js",[],"E:\\React\\expense-tracker\\src\\components\\Main\\Speechly.js",[],"E:\\React\\expense-tracker\\src\\components\\Snackbar\\Snackbar.js",[],"E:\\React\\expense-tracker\\src\\components\\Snackbar\\styles.js",[],"E:\\React\\expense-tracker\\src\\components\\InfoCard.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":21},{"ruleId":"101","severity":1,"message":"105","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"106","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"108","line":138,"column":8,"nodeType":"109","endLine":138,"endColumn":17,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'ErrorBoundary' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formData' and 'handleSubmit'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["114"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [formData, handleSubmit, segment]",{"range":"117","text":"118"},[4397,4406],"[formData, handleSubmit, segment]"]